#include <X11/XF86keysym.h>


/* appearance */
static const unsigned int gappx     = 20;       /* gaps between windows */
static const int swallowfloating    = 0;	    /* 1 means swallow floating windows by default */
static unsigned int borderpx        = 0;        /* border pixel of windows */
static unsigned int snap            = 32;       /* snap pixel */
static int showbar                  = 1;        /* 0 means no bar */
static int topbar                   = 1;        /* 0 means bottom bar */
static int barheight                = 36;       /* 0 means that dwm will calculate bar height */
static char dmenufont[]             = "monospace:size=10";
static char normbgcolor[]           = "#222222";
static char normbordercolor[]       = "#444444";
static char normfgcolor[]           = "#bbbbbb";
static char selfgcolor[]            = "#eeeeee";
static char selbordercolor[]        = "#005577";
static char selbgcolor[]            = "#005577";
static char *colors[][3] = {
       /*               fg           bg           border   */
       [SchemeNorm] = { normfgcolor, normbgcolor, normbordercolor },
       [SchemeSel]  = { selfgcolor,  selbgcolor,  selbordercolor  },
       [SchemeBlock1] = { "#B48EAD", normbgcolor, normbordercolor },
       [SchemeBlock2] = { "#EBCB8B", normbgcolor, normbordercolor },
       [SchemeBlock3] = { "#A3BE8C", normbgcolor, normbordercolor  },
       [SchemeBlock4] = { "#BF616A", normbgcolor, normbordercolor },
       [SchemeBlock5] = { "#81A1C1", normbgcolor, normbordercolor  },
       [SchemeBlock6] = { "#8FBCBB", normbgcolor, normbordercolor },
};

/* Fonts */
static char *fonts[] = { 
    "Fira Code Nerd Font Mono:size=10:antialias=true:autohint=true:style=Retina",
    "JoyPixels:pixelsize=20:antialias=true:autohint=true" 
};

/* My Programms */
#define BROWSER 	"vieb"
#define TERMINAL  	"st"
#define EDITOR   	"nvim"
#define TERMINAL_CLASS  	"St"

/* tagging */
static const char *tags[] = { "", "", "", "", "ﴬ", "", "ﱘ", ""};

static const Rule rules[] = {
	/* class      		instance    	title       tags mask     isfloating   isterminal  noswallow  monitor */
	{ "Vieb",  	        NULL,       	NULL,     	1 << 1,       0,           0,          0,         -1 },
	{ "LibreWolf",  	NULL,       	NULL,     	1 << 3,       0,           0,          0,         -1 },
	{ "Virt-manager",  	NULL,       	NULL,     	1 << 7,       0,           0,          0,         -1 },
	{ "TelegramDesktop",NULL,       	NULL,     	1 << 5,       0,           0,          0,         -1 },
	{ NULL,  		    "Jupyter",      NULL,     	1 << 3,       0,           0,          0,         -1 },
	{ "Chromium",  	    NULL,           NULL,     	1 << 3,       0,           0,          0,         -1 },
	{ TERMINAL_CLASS,  	NULL,       	NULL,     	0,            0,           1,          0,         -1 },
	{ "Nextcloud",  	NULL,       	NULL,     	0,            1,           0,          0,         -1 },
};

/* layout(s) */
static float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static int nmaster     = 1;    /* number of clients in master area */
static int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

#define STATUSBAR "dwmblocks"
/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, NULL };
static const char *termcmd[]  = { TERMINAL, NULL };

/*
 * Xresources preferences to load at startup
 */
ResourcePref resources[] = {
		{ "font0",              STRING,  &fonts[0] },
		{ "font1",              STRING,  &fonts[1] },
		{ "dmenufont",          STRING,  &dmenufont },
		{ "normbgcolor",        STRING,  &normbgcolor },
		{ "normbordercolor",    STRING,  &normbordercolor },
		{ "normfgcolor",        STRING,  &normfgcolor },
		{ "selbgcolor",         STRING,  &selbgcolor },
		{ "selbordercolor",     STRING,  &selbordercolor },
		{ "selfgcolor",         STRING,  &selfgcolor },
		{ "borderpx",          	INTEGER, &borderpx },
		{ "snap",          		INTEGER, &snap },
		{ "showbar",          	INTEGER, &showbar },
		{ "topbar",          	INTEGER, &topbar },
		{ "nmaster",          	INTEGER, &nmaster },
		{ "resizehints",       	INTEGER, &resizehints },
		{ "mfact",      	 	FLOAT,   &mfact },
};

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY,             		    XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,             		    XK_q,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  zoom,      	   {0} },
	{ MODKEY|ShiftMask,             XK_f,  	   togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
    	
	/* Programms launch */
    	{ MODKEY|ShiftMask,             XK_t,       spawn,          SHCMD("telegram-desktop") },
    	{ MODKEY|ShiftMask,             XK_b,       spawn,          SHCMD(BROWSER) },
    	{ MODKEY|ShiftMask,             XK_z,       spawn,          SHCMD("zathura") },
    	{ MODKEY|ShiftMask,             XK_p,       spawn,          SHCMD("passmenu") },
    	{ MODKEY|ShiftMask,           	XK_l,       spawn,          SHCMD("slock") },
    	{ MODKEY|ShiftMask,             XK_j,       spawn,          SHCMD("start_jupyter") },
    	{ MODKEY|ShiftMask,             XK_r,       spawn,          SHCMD(TERMINAL " -e lf") },
    	{ MODKEY,             		    XK_Tab,     spawn,          SHCMD("screenshot s") },
    	{ MODKEY|ShiftMask,             XK_Tab,     spawn,          SHCMD("screenshot f") },
    	{ MODKEY|ShiftMask,             XK_c,       spawn,          SHCMD("chromium") },
    	{ MODKEY|ShiftMask,            	XK_Tab,     spawn,          SHCMD("flameshot full") },
    	{ MODKEY|ShiftMask,            	XK_n,       spawn,          SHCMD(TERMINAL " -e neotasks vct") },
    	{ MODKEY|ShiftMask,            	XK_m,       spawn,          SHCMD(TERMINAL " -e neotasks vmt") },
    	{ MODKEY|ShiftMask,            	XK_e,       spawn,          SHCMD("dmconf") },
    	{ MODKEY|ShiftMask,            	XK_x,       spawn,          SHCMD("powermenu") },
    	{ MODKEY|ShiftMask,            	XK_s,       spawn,          SHCMD("dmsearch") },
    	{ MODKEY|ShiftMask,            	XK_u,       spawn,          SHCMD("file_upload") },
    	{ MODKEY|ControlMask,           XK_r,       spawn,          SHCMD("record") },
    	{ MODKEY|ControlMask|ShiftMask, XK_r,       spawn,          SHCMD("stop_record") },
        { MODKEY|ShiftMask,             XK_o,       spawn,          SHCMD("xclip -sel c -o | xargs open") },
	
	/* Volume conrol */
    	{ 0, 				XF86XK_AudioRaiseVolume,     	spawn,       	SHCMD("pactl set-sink-volume @DEFAULT_SINK@ +5%; pkill -RTMIN+14 dwmblocks") }, 
	    { 0, 				XF86XK_AudioLowerVolume,     	spawn,          SHCMD("pactl set-sink-volume @DEFAULT_SINK@ -5%; pkill -RTMIN+14 dwmblocks") },
    	{ 0, 				XF86XK_AudioMute,     		    spawn,          SHCMD("pactl set-sink-mute @DEFAULT_SINK@ toggle; pkill -RTMIN+14 dwmblocks") },

	/* Mpc control */
    	{ 0, 				XF86XK_AudioNext,     		    spawn,       	SHCMD("mpc next; pkill -RTMIN+15 dwmblocks") },
    	{ 0, 				XF86XK_AudioPrev,     		    spawn,       	SHCMD("mpc prev; pkill -RTMIN+15 dwmblocks") },
    	{ 0, 				XF86XK_AudioPlay,     		    spawn,       	SHCMD("mpc toggle; pkill -RTMIN+15 dwmblocks") },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button1,        sigstatusbar,   {.i = 1} },
	{ ClkStatusText,        0,              Button2,        sigstatusbar,   {.i = 2} },
	{ ClkStatusText,        0,              Button3,        sigstatusbar,   {.i = 3} },
	{ ClkStatusText,        0,              Button4,        sigstatusbar,   {.i = 4} },
	{ ClkStatusText,        0,              Button5,        sigstatusbar,   {.i = 5} },
	{ ClkStatusText,        ShiftMask,      Button5,        sigstatusbar,   {.i = 6} },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

